#!/usr/bin/env babel-node

import {basename} from "path";
import {
    readFileSync,
    writeFileSync,
    readdirSync,
} from "fs";

const destDir = "./src/icons/";
const srcDir = 'public/static/images/icons';
const files = readdirSync(srcDir);
const fileHeader = `/* @flow */
/* Generated by ./script/iconify */
/* eslint-disable max-len */
`
if (!files.length) {
    console.log(`Usage: ./script/iconify ../designs/icons/*`);
    process.exit(1);
}

function toClassName(source_path: string): string {
    return titleize(basename(source_path).
        replace("askizzy-icon-", '').
        replace(/.svg$/, '')
    )
}

function titleize(name: string): string {
    const upcaseGroup = (match, char) => char.toUpperCase();

    return name
        .replace(/^(.)/, upcaseGroup)
        .replace(/-(.)/g, upcaseGroup);
}

let svgs = [];

files.forEach((path) => {
    const content = readFileSync(srcDir + "/" + path, {encoding: 'utf-8'})
    const className = toClassName(path)

    const idx = content.match(/viewBox="/).index
    svgs.push(
        `<symbol id="${className}" ` +
        content.slice(idx, content.length)
            .replace(/\/svg>.*/m, '/symbol>')
            .replace(/id="[^"]*"/g, '')
    );

    const outFile = `${destDir}/${className}.js`;

    let allowColoring = "allow-override-color"
    if ([
        "DemographicAboriginal",
        "DemographicTorresStrait",
        "DemographicLgbtiq",
    ].includes(className)){
        allowColoring = "disallow-override-color";
    }

    writeFileSync(outFile, `${fileHeader}
import React from "react";
import classnames from "classnames";

export default class SvgIcon${className} extends React.Component {
    props: {
        className?: string,
    };
    state: void;

    render() {
        const {className, ...rest} = this.props;
        const classes = classnames(
            "${className}Icon",
            "${allowColoring}",
            "Icon",
            "SvgIcon",
            className
        );

        return (
            <span
                {...rest}
            >
                <svg className={classes}>
                   <use xlinkHref="#${className}"></use>
                </svg>
            </span>
        );
    }
}
`, 'utf8');
});

writeFileSync(
    "public/static/images/icons.svg",
    "<svg>" + svgs.join("\n") + "</svg>"
);

const importStatements = files.map((file) =>
    `import SvgIcon${toClassName(file)} from \"./${toClassName(file)}.js\";`
).join("\n");
const exportStatements = files.map((file) =>
    `    ${toClassName(file)}: SvgIcon${toClassName(file)},`
).join("\n")

writeFileSync("src/icons/index.js", `${fileHeader}
${importStatements}

export default {
${exportStatements}
};
`, 'utf8');
